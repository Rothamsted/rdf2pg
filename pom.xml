<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
	<!-- 
		Common Knetminer parent, defining stuff like our Nexus
	-->  
	<parent>
	  <groupId>uk.ac.rothamsted.knetminer</groupId>
	  <artifactId>knetminer-common</artifactId>
	  <version>2.0.1-SNAPSHOT</version>
	</parent>  
  
  
  <groupId>uk.ac.rothamsted.kg</groupId>
  <artifactId>rdf2pg-pom</artifactId>
  <packaging>pom</packaging>
  
  <version>4.0-SNAPSHOT</version>
  
  <name>rdf2pg-pom - top POM</name>
  <url>https://github.com/Rothamsted/rdf2pg</url>
      
  <modules>
		<module>rdf2pg-core</module>
		<module>rdf2pg-core-cli</module>
		<module>neo4j-utils</module>
		<module>rdf2neo</module>
		<module>rdf2graphml</module>
		<module>rdf2neo-cli</module>
		<module>rdf2graphml-cli</module>
  </modules>
  
  <properties>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<slf4j.version>1.7.25</slf4j.version>
		<!-- Overrides the version defined in the parent POM -->
		<jutils.version>10.0-SNAPSHOT</jutils.version>
  </properties>
  
  <dependencyManagement>
  		<dependencies>
		  					           			      
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
	      <version>1.2.3</version>
			</dependency>
						
			<!-- 
				Intercepts log4j and sends it to SL4J
				This bridge is needed because we already use components based on Log4j, the ones following might be needed
				in your application, so they're commented here. 
			-->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>log4j-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			
			<!-- Same for Jakarta Commons Logging -->
			<dependency>
			  <groupId>org.slf4j</groupId>
			  <artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			
			<!-- Same for Java Logging -->
			<!-- IMPORTANT: If you're really using this, you will probably want to fix performance too:
			  http://www.slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html
			  http://logback.qos.ch/manual/configuration.html#LevelChangePropagator
			 -->
			<dependency>
			  <groupId>org.slf4j</groupId>
			  <artifactId>jul-to-slf4j</artifactId>
				<version>${slf4j.version}</version>
			</dependency>			

  	</dependencies>
  		
  </dependencyManagement>


	<build>
		<pluginManagement>
			<plugins>
			
			  <plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-surefire-plugin</artifactId>
			    <configuration>
				    <!--
				      Command line tests can invoke a CLI test without this braking the build cycle with System.exit()
				      See uk.ac.rothamsted.kg.rdf2pg.cli.Rdf2PGCli for details. 
				    -->
				    <systemPropertyVariables>
				      <rdf2pg.no_jvm_exit>true</rdf2pg.no_jvm_exit>
				    </systemPropertyVariables>
			      <environmentVariables>
			      	<!-- Just to align to production files which are used for tests too -->
			       	<RDF2PG_HOME>${project.build.directory}/test-classes</RDF2PG_HOME>
			      </environmentVariables>
			    </configuration>
			  </plugin>
			
				<!-- 
					A small plug-in that starts Neo4j, we inherited this from AndrÃ© and it is now at 
					https://github.com/Rothamsted/neo4j-server-maven-plugin
				 -->
				<plugin>
					<groupId>com.github.harti2006</groupId>
					<artifactId>neo4j-server-maven-plugin</artifactId>
				</plugin>
				
				<!-- Use this to start integration tests (*IT.java) -->
		    <plugin>
		      <artifactId>maven-failsafe-plugin</artifactId>
		      <configuration>
			      <properties>
			        <property>
			        	<!-- As above -->
			          <name>listener</name>
			          <value>uk.ac.ebi.utils.test.junit.TestOutputDecorator</value>
			        </property>
			      </properties>
			      <environmentVariables>
			      	<!-- Just to align to production files which are used for tests too -->
			       	<RDF2PG_HOME>${project.build.directory}/test-classes</RDF2PG_HOME>
			      </environmentVariables>
			      <!--
			      	Command line tests can invoke a CLI test without this braking the build cycle with System.exit()
			      	See uk.ac.rothamsted.kg.rdf2pg.cli.Rdf2PGCli for details. 
			      -->
			      <systemPropertyVariables>
			      	<rdf2pg.no_jvm_exit>true</rdf2pg.no_jvm_exit>
			      </systemPropertyVariables>
		      </configuration>
		    </plugin>
		    
				<!-- 
					The package for line commands (*-cli modules) is built through this. Part of these files
					come from the core package, downloaded from the Maven dependency plug-in (see below). 
				-->
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<configuration>
						<archiverConfig>
							<fileMode>0755</fileMode>
							<directoryMode>0755</directoryMode>
							<defaultDirectoryMode>0755</defaultDirectoryMode>
						</archiverConfig>
					</configuration>
					<executions>
						<execution>
							<id>cli-pkg</id>
							<!-- Default is package, but I don't see much point with packaging before tests are passed -->
							<phase>post-integration-test</phase>
							<goals>
								<goal>single</goal>
							</goals>
							<configuration>
								<finalName>${project.artifactId}_${project.version}</finalName>
								<appendAssemblyId>false</appendAssemblyId>
								<attach>true</attach>
								<descriptors>
									<descriptor>${project.build.directory}/assembly/pkg.xml</descriptor>
								</descriptors>
							</configuration>
						</execution>
					</executions>
				</plugin>	
				
				<!--
					This has two common executions, both download different files from the core package to be used by 
					the others. See below for details.
					
					Including this plug-in in your project by just telling its artifactId runs the first execution only 
					(test file downloads) and that's typical of library modules.
					
					If you include the plugin and also override the get-cli-resources execution, then it additionally will download
					files that are needed (by the Assembly plug-in above) to build the command line packages. Of course, that's
					typical of *-cli modules (havea look at them for details on how to activate).
				 -->
	  		<plugin>
	  			<artifactId>maven-dependency-plugin</artifactId>
	  			<executions>
	  				<!--
	  					This downloads common test files from the core module.
	  					This is active by default (via the <phase> default). 
	  				-->
	  				<execution>
	  					<id>get-test-resources</id>
	  					<phase>process-test-resources</phase>
	  					<goals>
	  						<goal>unpack</goal>
	  					</goals>
	  					<configuration>
		          	<artifactItems>
		            	<artifactItem>
								    <groupId>uk.ac.rothamsted.kg</groupId>
							  		<artifactId>rdf2pg-core</artifactId>
										<version>${project.version}</version>
										<classifier>tests</classifier>
										<type>test-jar</type>
	      	          <excludes>**/*.class</excludes>
										<outputDirectory>${project.build.directory}/test-classes</outputDirectory>	               	
		             	</artifactItem>
		          	</artifactItems>
	  					</configuration>
	  				</execution>
	  				<!-- 
	  					As said above, these files are typically used in command line modules. By default it's disabled 
	  					(bound to to the none phase).
	  				 -->
	  				<execution>
	  					<id>get-cli-resources</id>
	  					<!-- 
	  						Recommended phase to activate it (see *-cli modules). The Assembly plug-in usually comes straight 
	  					  after this (the package phase). 
	  					-->
	  					<!-- <phase>prepare-package</phase> -->
	  					<phase>none</phase>
	  					<goals>
	  						<goal>unpack</goal>
	  					</goals>
	  					<configuration>
		          	<artifactItems>
		             	<!-- Base files to build the CLI -->
		            	<artifactItem>
								    <groupId>uk.ac.rothamsted.kg</groupId>
							  		<artifactId>rdf2pg-core-cli</artifactId>
										<version>${project.version}</version>
		               	<includes>assembly/**/*</includes>
		               	<!-- This is target/assembly, the assembly plug-in picks from here -->
										<outputDirectory>${project.build.directory}</outputDirectory>
										<!-- 
										  The downloaded copy of this files is renamed.
										  
											The replacement variables below are defined by *-cli modules and assign proper names to the 
											particular line command needed for a particular rdf2pg flavour (eg, rdf2neo.sh, rdf2graphml.sh)
										-->
										<fileMappers>
			                <fileMapper implementation="org.codehaus.plexus.components.io.filemappers.RegExpFileMapper">
												<pattern>\Qrdf2pg.sh\E</pattern>
												<replacement>${rdf2pg.cli.rdf2pg}.sh</replacement>
											</fileMapper>
										</fileMappers>										               	
		             	</artifactItem>	             	
		          	</artifactItems>
	  					</configuration>
	  				</execution>	  				
	  			</executions>
	  		</plugin>
	  										    				
			</plugins>
		</pluginManagement>		
	</build>
	
	<repositories>
	  <repository>
	  	<!-- To pick the parent POM -->
			<id>knetminer-repo</id>
			<name>Knetminer Unified Repository</name>
			<url>https://knetminer.com/artifactory/repository/maven-public</url>
			<snapshots><enabled>true</enabled></snapshots>
			<releases><enabled>true</enabled></releases>
			  </repository>
	</repositories>	
</project>